<script>
import { computed, defineComponent } from 'vue';
import { useStore } from 'vuex';
import ProductPrintOptions from 'js/mixins/product-print-options'
import JUMP_NAV, JUMP_NAV_BAR_CATEGORY, CLICK_ACTION from 'js/common/analyticsEvents'
import pushTrackingEvent from 'js/common/analytics'
import HEADER_HEIGHTS from 'js/common/headerHeights'
import EVENTS, EventBus from 'js/common/events'

export default defineComponent({
    name: 'variant-content',
    props: {
        baseProductModel: {'type': 'Object', 'required': True},
        productVariant: {'type': 'Object', 'required': True},
        certsAndDocsModel: {'type': 'Object', 'required': True},
        priceVariant: {'type': 'Object', 'required': True},
        translations: {'type': 'Object', 'required': True}
    },
    setup() {
        const store = useStore();
        const isUserEmployeeAndNotImpersonating = computed(() => store.getters.store.getters.isUserEmployeeAndNotImpersonating);
        const isImpersonating = computed(() => store.getters.store.getters.isImpersonating);
        const isNationalAccount = computed(() => store.getters.store.getters.isNationalAccount);
        const isSupplier = computed(() => store.getters.store.getters.isSupplier);
        const isUserEmployee = computed(() => store.getters.store.getters.isUserEmployee);
        const showInventory = computed(() => store.getters.store.getters.showInventory);
        const isBroker = computed(() => store.getters.store.getters.isBroker);
        const isBuyingGroup = computed(() => store.getters.store.getters.isBuyingGroup);
        const product = computed(() => store.getters.store.getters.product);
        const myNumber = computed(() => store.getters.store.getters.myNumber);

        const fixedNav = computed(() => this.scrollPosition > this.triggerHeight });
        const currentOffset = computed(() => this.scrollPosition + this.headerHeight });
        const showFeatures = computed(() => true });
        const showNutrition = computed(() => this.productVariant.value.ShowNutritionAndAllergens });
        const showGtins = computed(() => this.baseProductModel.value.PackagingSection.GtinLevels });
        const showPricing = computed(() => !this.isNationalAccount });
        const showCertifications = computed(() => true });
        const showContacts = computed(() => this.isSupplier || this.isUserEmployee });
        const showMyNumber = computed(() => this.myNumber && !this.isNationalAccount || this.isSupplier || this.isBroker || this.isBuyingGroup });

        const setActiveSection = (pos) => { if (pos < this.sectionOffsets.0) { this.activeSection = 0 } else if (pos >= this.sectionOffsets.0 && pos < this.sectionOffsets.1 && this.showFeatures) { this.activeSection = 1 } else if (pos >= this.sectionOffsets.1 && pos < this.sectionOffsets.2 && this.showNutrition) { this.activeSection = 2 } else if (pos >= this.sectionOffsets.2 && pos < this.sectionOffsets.3 && this.showGtins) { this.activeSection = 3 } else if (pos >= this.sectionOffsets.3 && pos < this.sectionOffsets.4 && this.showPricing) { this.activeSection = 4 } else if (pos >= this.sectionOffsets.4 && pos < this.sectionOffsets.5 && this.showCertifications) { this.activeSection = 5 } else if (pos >= this.sectionOffsets.5 && pos < this.sectionOffsets.6 && this.showInventory) { this.activeSection = 6 } else if (pos >= this.sectionOffsets.6 && this.showContacts) { this.activeSection = 7 } };
        const scrollTo = (val, label) => { this.getOffsets(); let offset = 0; if (val > 0) { const sectionId = this.sections.val - 1; if (this.isImpersonating && this.$isMobileOrMobileLandscape) { offset = document.getElementById(sectionId).offsetTop - this.headerHeight + this.mobileImpersonationBarHeight } else if (this.isImpersonating && !this.$isMobileOrMobileLandscape) { offset = document.getElementById(sectionId).offsetTop - this.headerHeight + this.impersonationBarHeight } else { offset = document.getElementById(sectionId).offsetTop - this.headerHeight } }; pushTrackingEvent(JUMP_NAV_BAR_CATEGORY, CLICK_ACTION, label); window.scrollTo({top: offset, behavior: 'smooth'}) };
        const getOffsets = () => { this.sectionOffsets = []; this.sections.forEach((sectionId) => { const offset = document.getElementById(sectionId).offsetTop; this.sectionOffsets.push(offset) }); this.getHeaderHeight(); this.setActiveSection(Math.floor(window.scrollY)) };
        const getHeaderHeight = () => { this.headerHeight = document.getElementById('stickyNav').clientHeight };
        const watchScroll = () => { this.scrollPosition = Math.floor(window.scrollY) };
        watch(() => currentOffset, (newVal) => { let adjust = 0; if (this.isImpersonating && this.$isMobileOrMobileLandscape) adjust = this.mobileImpersonationBarHeight else if (this.isImpersonating && !this.$isMobileOrMobileLandscape) adjust = this.impersonationBarHeight; return this.setActiveSection(newVal + adjust) });
        onBeforeMount(() => {
            () => { EventBus.$on(EVENTS.PDP.SCROLL_TO_SECTION, this.scrollTo) }
        });
        onMounted(() => {
            () => { window.addEventListener('resize', this.getOffsets); window.addEventListener('scroll', this.watchScroll); Object.keys(this.$refs).forEach((ref) => { if (ref.includes('section')) this.sections.push(this.$refs.ref.id) }); setTimeout(() => { this.getOffsets() }, 1000) }
        });
        onBeforeUnmount(() => {
            () => { EventBus.$off(EVENTS.PDP.SCROLL_TO_SECTION, this.scrollTo) }
        });
        return {
            isUserEmployeeAndNotImpersonating,
            isImpersonating,
            isNationalAccount,
            isSupplier,
            isUserEmployee,
            showInventory,
            isBroker,
            isBuyingGroup,
            product,
            myNumber,
            fixedNav,
            currentOffset,
            showFeatures,
            showNutrition,
            showGtins,
            showPricing,
            showCertifications,
            showContacts,
            showMyNumber,
            setActiveSection,
            scrollTo,
            getOffsets,
            getHeaderHeight,
            watchScroll
        };
    }
});
</script>