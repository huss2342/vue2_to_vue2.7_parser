input file:

```
<script>
import TranslationsHelper from 'js/mixins/translations-helper';
import InventorySalesData from 'js/mixins/inventory-sales-data';
import DataTablePager from 'js/components/UI/DataTablePager';
import { mapGetters } from 'vuex';
import moment from 'moment';
import 'moment-timezone';

export default {
    name: 'variant-content-sales-tab',
    components: {
        DataTablePager
    },
    mixins: [InventorySalesData, TranslationsHelper],
    data() {
        return {
            locale: 'America/Chicago'
        };
    },
    computed: {
        ...mapGetters([
            'salesData'
        ]),
        pageGroup() {
            const begin = this.getPageBeginning(this.currentPage);
            const end = this.getPageEnd(this.pagedDistributors, this.salesData.SalesWeekTotalsByDistributor);
            return this.replaceTranslationPlaceholder(this.translations.PageGroup, begin, end, this.salesData.SalesWeekTotalsByDistributor.length);
        },
        pagedDistributors() {
            return this.paginateArray(this.salesData.SalesWeekTotalsByDistributor, 10);
        },
        startOfLastWeek() {
            return moment(this.salesData.EndDate).tz(this.locale).subtract(1, 'weeks').add(1, 'days')
                .format('MMM DD');
        },
        endOfLastWeek() {
            return moment(this.salesData.EndDate).tz(this.locale).subtract(1, 'weeks').add(7, 'days')
                .format('MMM DD');
        },
        startOf2WeeksAgo() {
            return moment(this.salesData.EndDate).tz(this.locale).subtract(2, 'weeks').add(1, 'days')
                .format('MMM DD');
        },
        endOf2WeeksAgo() {
            return moment(this.salesData.EndDate).tz(this.locale).subtract(2, 'weeks').add(7, 'days')
                .format('MMM DD');
        },
        startOf3WeeksAgo() {
            return moment(this.salesData.EndDate).tz(this.locale).subtract(3, 'weeks').add(1, 'days')
                .format('MMM DD');
        },
        endOf3WeeksAgo() {
            return moment(this.salesData.EndDate).tz(this.locale).subtract(3, 'weeks').add(7, 'days')
                .format('MMM DD');
        },
        startOf4WeeksAgo() {
            return moment(this.salesData.EndDate).tz(this.locale).subtract(4, 'weeks').add(1, 'days')
                .format('MMM DD');
        },
        endOf4WeeksAgo() {
            return moment(this.salesData.EndDate).tz(this.locale).subtract(4, 'weeks').add(7, 'days')
                .format('MMM DD');
        },
        startOf8WeeksAgo() {
            return moment(this.salesData.EndDate).tz(this.locale).subtract(8, 'weeks').add(1, 'days')
                .format('MMM DD');
        },
        endOf8WeeksAgo() {
            return moment(this.salesData.EndDate).tz(this.locale).format('MMM DD');
        }
    },
    methods: {
        // Shared Vue instance in js/mixins/inventory-sales-data
    }
};
</script>
```

output file:
```
<script>
import { defineComponent, computed } from 'vue';
import { useStore } from 'js/store';

export default defineComponent({
    name: 'variant-content-sales-tab',
    props: {

    },
    setup() {
        const store = useStore();
        const salesData = computed(() => store.getters.salesData);
        const pageGroup = computed(() => const begin = this.getPageBeginning(this.currentPage);
            const end = this.getPageEnd(this.pagedDistributors, this.salesData.SalesWeekTotalsByDistributor);
            return this.replaceTranslationPlaceholder(this.translations.PageGroup, begin, end, this.salesData.SalesWeekTotalsByDistributor.length););
        return {
            salesData,
            pageGroup
        };
    }
});
</script>
```

Expected output
```
<script>
import translationsHelper from 'js/composable/translationsHelper';
import inventorySalesData from 'js/composable/inventorySalesData';
import DataTablePager from 'js/components/UI/DataTablePager';
import { useStore } from 'js/store';
import { defineComponent, computed } from 'vue';
import moment from 'moment';
import 'moment-timezone';

export default defineComponent({
    name: 'variant-content-sales-tab',
    components: {
        DataTablePager
    },
    props: {
        translations: { type: Object, required: true }
    },
    setup(props) {
        const store = useStore();
        const { replaceTranslationPlaceholder } = translationsHelper();
        const {
            currentPage, lastUpdated, previous, next, goToPage, getPageBeginning, getPageEnd, paginateArray
        } = inventorySalesData(props.translations);

        const salesData = computed(() => store.getters.salesData);
        const pagedDistributors = computed(() => paginateArray(salesData.value.SalesWeekTotalsByDistributor, 10));
        const pageGroup = computed(() => {
            const begin = getPageBeginning();
            const end = getPageEnd(pagedDistributors.value, salesData.value.SalesWeekTotalsByDistributor);
            return replaceTranslationPlaceholder(props.translations.PageGroup, begin, end, salesData.value.SalesWeekTotalsByDistributor.length);
        });

        const locale = 'America/Chicago';
        const startOfLastWeek = computed(() => moment(salesData.value.EndDate).tz(locale).subtract(1, 'weeks').add(1, 'days')
            .format('MMM DD'));
        const endOfLastWeek = computed(() => moment(salesData.value.EndDate).tz(locale).subtract(1, 'weeks').add(7, 'days')
            .format('MMM DD'));
        const startOf2WeeksAgo = computed(() => moment(salesData.value.EndDate).tz(locale).subtract(2, 'weeks').add(1, 'days')
            .format('MMM DD'));
        const endOf2WeeksAgo = computed(() => moment(salesData.value.EndDate).tz(locale).subtract(2, 'weeks').add(7, 'days')
            .format('MMM DD'));
        const startOf3WeeksAgo = computed(() => moment(salesData.value.EndDate).tz(locale).subtract(3, 'weeks').add(1, 'days')
            .format('MMM DD'));
        const endOf3WeeksAgo = computed(() => moment(salesData.value.EndDate).tz(locale).subtract(3, 'weeks').add(7, 'days')
            .format('MMM DD'));
        const startOf4WeeksAgo = computed(() => moment(salesData.value.EndDate).tz(locale).subtract(4, 'weeks').add(1, 'days')
            .format('MMM DD'));
        const endOf4WeeksAgo = computed(() => moment(salesData.value.EndDate).tz(locale).subtract(4, 'weeks').add(7, 'days')
            .format('MMM DD'));
        const startOf8WeeksAgo = computed(() => moment(salesData.value.EndDate).tz(locale).subtract(8, 'weeks').add(1, 'days')
            .format('MMM DD'));
        const endOf8WeeksAgo = computed(() => moment(salesData.value.EndDate).tz(locale).format('MMM DD'));

        return {
            salesData,
            pagedDistributors,
            currentPage,
            lastUpdated,
            previous,
            next,
            goToPage,
            getPageBeginning,
            getPageEnd,
            paginateArray,
            startOfLastWeek,
            endOfLastWeek,
            startOf2WeeksAgo,
            endOf2WeeksAgo,
            startOf3WeeksAgo,
            endOf3WeeksAgo,
            startOf4WeeksAgo,
            endOf4WeeksAgo,
            startOf8WeeksAgo,
            endOf8WeeksAgo,
            pageGroup
        };
    }
});
</script>
```
