<script>
import { mapGetters } from 'vuex';
import debounce from 'js/lib/debounce';
import MaxLengthText from 'js/components/UI/MaxLengthText';
import prices from 'js/parsers/prices';
import { getPrices } from 'js/services/pricing';
import { getRecommendations } from 'js/services/recommendations';
import TranslationsHelper from 'js/mixins/translations-helper';
import AuthorablePadding from 'js/mixins/authorable-padding';
import PartialLoader from 'js/components/UI/PartialLoader.vue';
import { pushProductImpression, pushProductClick } from 'js/common/analytics';
import {
    selectMarketingItem,
    addToMarketingCart,
    GA4ViewItemList,
    GA4SelectItem
} from 'js/common/analytics-ga4';
import { EventBus, EVENTS } from 'js/common/events';

export default {
    name: 'horizontal-product-display',
    components: {
        MaxLengthText,
        PartialLoader
    },
    mixins: [TranslationsHelper, AuthorablePadding],
    props: {
        initialProducts: {
            type: Array,
            default: () => []
        },
        hasPromotionalContent: {
            type: Boolean,
            default: false
        },
        promotionalContent: {
            type: Object,
            required: true
        },
        labels: {
            type: Object,
            required: true
        },
        listTagValue: {
            type: String,
            default: ''
        },
        pricingLazyLoad: {
            type: Boolean,
            default: false
        },
        showAddToCart: {
            type: Boolean,
            default: false
        },
        showReplacementItems: {
            type: Boolean,
            default: false
        },
        showLessThanFive: {
            type: Boolean,
            default: false
        },
        isAuthenticated: {
            type: Boolean,
            default: false
        },
        title: {
            type: String,
            default: ''
        },
        subtitle: {
            type: String,
            default: ''
        },
        widget: {
            type: String,
            default: ''
        },
        viewItemListId: {
            type: String,
            default: ''
        },
        viewItemListName: {
            type: String,
            default: ''
        },
        isAuthored: Boolean
    },
    data() {
        return {
            pageCount: 1,
            itemsPerPage: 5,
            currentPage: 0,
            minItemsLength: 5,
            itemWidth: 222,
            itemMargin: 7,
            fetchError: '',
            isLoadingPrice: false,
            isLoadingProducts: false,
            products: [...this.initialProducts],
            descriptionMaxLines: 2,
            addToCartQueue: [],
            isAddingToCart: false
        };
    },
    computed: {
        ...mapGetters([
            'isMarketingSite',
            'product',
            'showAlternatives',
            'hasAlternativesForUnavailableItems',
            'showImperialValues'
        ]),
        showComponent() {
            return this.products.length && (this.showLessThanFive || this.products.length >= this.minItemsLength);
        },
        showAlternaiveProducts() {
            const alternativeWidgets = ['morsumProperty_PDP', 'alternativeProducts_PDP'];
            if (this.showAlternatives && this.hasAlternativesForUnavailableItems) {
                return this.showComponent && alternativeWidgets.includes(this.widget);
            }
            return false;
        },
        showSimilarItems() {
            if (!this.showAlternatives) {
                return this.showComponent && this.widget === 'lastWeekTrendingProducts_PDP';
            }
            return false;
        },
        showRecentlyViewed() {
            return this.showComponent && this.widget === 'recentlyViewedProducts_PDP';
        },
        showOtherRecommendedItems() {
            return this.showComponent && Object.keys(this.product).length === 0;
        },
        pushViewItemListEvent() {
            return this.showAlternaiveProducts || this.showSimilarItems || this.showRecentlyViewed || this.showOtherRecommendedItems;
        },
        isLastPage() {
            return this.currentPage >= this.pageCount - 1;
        },
        showNavigation() {
            return this.pageCount > 1;
        },
        isShortProduct() {
            return !this.isAuthenticated || !this.showAddToCart;
        }
    },
    watch: {
        addToCartQueue() {
            if (!this.isAddingToCart && this.addToCartQueue.length > 0) {
                this.processItemFromQueue();
            }
        },
        $isDesktop(newValue, oldValue) {
            if (!this.products.length) {
                return;
            }

            this.currentPage = 0;
            this.translateCarousel();

            if (!oldValue && newValue) {
                this.blockContainer.scrollTo({ left: 0, behavior: 'smooth' });
            }
        }
    },
    created() {
        EventBus.$on(EVENTS.CART.PRODUCT_ADDING_FROM_HORIZONTAL_DISPLAY, this.addItemToCartQueue);
        EventBus.$on(EVENTS.CART.PRODUCT_ADDED_TO_CART, this.processItemFromQueue);
    },
    /**
     * Call fetchData function before the component render.
     */
    mounted() {
        if (this.widget === 'morsumProperty_PDP' && this.showAlternatives) {
            this.getAsyncMorsumRecommendations();
        } else if (this.widget === 'lastWeekTrendingProducts_PDP' && !this.showAlternatives) {
            window.addEventListener('epi-recommendations', this.getRecommendations.bind(this));
        } else if (this.widget === 'recentlyViewedProducts_PDP') {
            window.addEventListener('epi-recommendations', this.getRecommendations.bind(this));
        }
        if (!this.products.length) return;
        this.bootstrapData();
    },
    beforeDestroy() {
        window.removeEventListener('resize', this.handleResize);
        window.removeEventListener('epi-recommendations', this.getRecommendations.bind(this));
        EventBus.$off(EVENTS.CART.PRODUCT_ADDING_FROM_HORIZONTAL_DISPLAY, this.addItemToCartQueue);
        EventBus.$off(EVENTS.CART.PRODUCT_ADDED_TO_CART, this.processItemFromQueue);
    },
    methods: {
        pushToDataLayer(product, index, obj) {
            const item = {
                item_id: product.Code,
                item_name: product.Description,
                currency: product.Price.Currency.CurrencyCode,
                index,
                item_category: product.Category,
                item_category2: '',
                item_category3: product.IsPackageProduct ? 'Package Product' : 'Individual Product',
                price: product.Price.Amount,
                quantity: obj.quantity
            };
            addToMarketingCart(item);
        },
        updateInventoryMessage(obj) {
            const index = this.products.findIndex(object => object.Code === obj.code);
            this.products[index].StockStatus = obj.message;
        },
        async getRecommendations(event) {
            if (!event.detail || this.isAuthored) {
                return;
            }
            const { smartRecs } = event.detail;
            // the epi response has all the instances in the page, we need to filter this instance
            const instanceRecs = smartRecs.find(x => x.widget === this.widget) || {};

            if (Object.keys(instanceRecs).length) {
                this.isLoadingProducts = true;
                const res = await getRecommendations({ smartRecs: instanceRecs.recs, widget: this.widget, itemCode: this.product.Code });
                if (res.error) {
                    console.log(res.error.response); // eslint-disable-line no-console
                } else {
                    this.products = res.data.RecommendedItems;
                    this.isLoadingProducts = false;
                    this.bootstrapData();
                }
            }
        },
        async getAsyncMorsumRecommendations() {
            const res = await getRecommendations({ smartRecs: null, widget: this.widget, itemCode: this.product.Code });
            if (res.error) {
                console.log(res.error.response); // eslint-disable-line no-console
            } else {
                this.products = res.data.RecommendedItems;
                this.isLoadingProducts = false;
                this.bootstrapData();
            }
        },
        bootstrapData() {
            this.setElements();

            if (this.isAuthenticated && this.pricingLazyLoad && this.products.length) {
                this.fetchPricing(this.products);
            } else {
                if (!this.isMarketingSite) {
                    pushProductImpression(this.products, this.listTagValue);
                    GA4ViewItemList(this.mapGA4ItemArray(this.products));
                }

                this.$nextTick(() => {
                    this.setPagination();
                    this.setListeners();
                });
            }
        },
        setElements() {
            this.scrollableContainer = this.$el.querySelector('.horizontal-product-display__container__scrollable-container');
            this.blockContainer = this.$el.querySelector('.horizontal-product-display__container');
        },
        setListeners() {
            window.addEventListener('resize', this.handleResize);
        },
        setPagination() {
            const itemsCount = this.hasPromotionalContent ? this.products.length + 1 : this.products.length;

            this.itemsPerPage = Math.floor((this.scrollableContainer.clientWidth + this.itemMargin) / (this.itemWidth + this.itemMargin));
            this.pageCount = Math.ceil(itemsCount / this.itemsPerPage);
        },
        handleResize: debounce(function resizeHandler() {
            this.setElements();
            this.setPagination();
        }, 50),
        async fetchPricing(products) {
            const codes = products.map(product => product.Code);
            this.isLoadingPrice = true;
            const res = await getPrices({ Item: codes });
            if (res.error) {
                console.log(res.error.response); // eslint-disable-line no-console
            } else {
                this.products = prices(products, res.data);
                this.$nextTick(() => {
                    this.setPagination();
                    this.setListeners();
                    if (!this.isMarketingSite) {
                        pushProductImpression(this.products, this.listTagValue);
                        if (this.pushViewItemListEvent) {
                            GA4ViewItemList(this.mapGA4ItemArray(this.products));
                        }
                    }
                });
            }
            this.isLoadingPrice = false;
        },
        navigatePrevious() {
            if (this.currentPage !== 0) {
                this.currentPage -= 1;
                this.translateCarousel();
            }
        },
        navigateNext() {
            if (this.currentPage < this.pageCount - 1) {
                this.currentPage += 1;
                this.translateCarousel();
            }
        },
        translateCarousel() {
            const translateAmount = this.itemWidth * this.itemsPerPage + this.itemMargin * this.itemsPerPage;

            this.scrollableContainer.style.transform = `translateX(-${translateAmount * this.currentPage}px)`;
        },
        goToProductDetails(event, product, index) {
            const openInNewWindow = event.ctrlKey || event.metaKey || product.OpenInNewWindow;
            if (!this.isMarketingSite) {
                GA4SelectItem({ ...this.ga4ItemObj(product), index: index + 1, quantity: 1 });
                pushProductClick(product, index, this.listTagValue, openInNewWindow);
            } else {
                selectMarketingItem(product, index, this.title, this.widget, openInNewWindow);
            }
        },
        mapGA4ItemArray(items) {
            return items.map(item => ({
                item_name: item.Description,
                item_id: item.Code,
                affiliation: `${item.Gtin}_${item.Temperature}`,
                price: item.PriceFormatted,
                item_brand: item.Brand,
                item_category: item.CategoryLevel1,
                item_category2: item.CategoryLevel2,
                item_category3: item.CategoryLevel3,
                item_category4: item.Supplier,
                item_category5: this.showImperialValues ? item.ImperialCaseShipingWeight : item.MetricCaseShippingWeight,
                item_variant: item.Flavor,
                item_list_name: this.viewItemListName,
                item_list_id: this.viewItemListId,
                quantity: item.AddToCartViewModel.MinQuantity
            }));
        },
        ga4ItemObj(item) {
            return {
                item_name: item.Description,
                item_id: item.Code,
                affiliation: `${item.Gtin}_${item.Temperature}`,
                price: item.PriceFormatted,
                item_brand: item.Brand,
                item_category: item.CategoryLevel1,
                item_category2: item.CategoryLevel2,
                item_category3: item.CategoryLevel3,
                item_category4: item.Supplier,
                item_category5: this.showImperialValues ? item.ImperialCaseShipingWeight : item.MetricCaseShippingWeight,
                item_variant: item.Flavor,
                item_list_name: this.viewItemListName,
                item_list_id: this.viewItemListId
            };
        },
        addItemToCartQueue(addToCartRequest) {
            this.addToCartQueue.push(addToCartRequest);
        },
        processItemFromQueue() {
            this.isAddingToCart = false;
            if (this.addToCartQueue.length > 0) {
                this.isAddingToCart = true;
                const itemFromQueue = this.addToCartQueue.shift();
                EventBus.$emit(EVENTS.CART.PRODUCT_PROCESS_ITEM_FROM_QUEUE, itemFromQueue);
            }
        }
    }
};
</script>