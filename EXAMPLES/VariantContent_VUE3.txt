<script>
import {
    defineComponent, ref, computed, watch, getCurrentInstance,
    onMounted, onBeforeUnmount
} from 'vue';
import { pushTrackingEvent } from 'js/common/analytics';
import HEADER_HEIGHTS from 'js/common/headerHeights';
import { EVENTS, EventBus } from 'js/common/events';
import { JUMP_NAV, JUMP_NAV_BAR_CATEGORY, CLICK_ACTION } from 'js/common/analyticsEvents';
import { useStore } from 'js/store';

export default defineComponent({
    name: 'variant-content',
    props: {
        baseProductModel: { type: Object, required: true },
        productVariant: { type: Object, required: true },
        certsAndDocsModel: { type: Object, required: true },
        priceVariant: { type: Object, required: true },
        translations: { type: Object, required: true }
    },
    setup(props) {
        const sectionFeatures = ref(null);
        const sectionNutrition = ref(null);
        const sectionGtins = ref(null);
        const sectionPricing = ref(null);
        const sectionCerts = ref(null);
        const sectionInventory = ref(null);
        const sectionContacts = ref(null);

        const store = useStore();
        const instance = getCurrentInstance();
        const root = instance.proxy.$root;

        const sections = ref([]);
        const sectionOffsets = ref([]);
        const scrollPosition = ref(0);
        const activeSection = ref(0);
        const headerHeight = ref(0);
        const impersonationBarHeight = ref(HEADER_HEIGHTS.IMPERSONATION_BAR_HEIGHT);
        const mobileImpersonationBarHeight = ref(HEADER_HEIGHTS.IMPERSONATION_BAR_MOBILE_HEIGHT);
        const triggerHeight = ref(HEADER_HEIGHTS.PDP_STICKY_TRIGGER);

        const isUserEmployeeAndNotImpersonating = computed(() => store.getters.isUserEmployeeAndNotImpersonating);
        const isImpersonating = computed(() => store.getters.isImpersonating);
        const isNationalAccount = computed(() => store.getters.isNationalAccount);
        const isSupplier = computed(() => store.getters.isSupplier);
        const isUserEmployee = computed(() => store.getters.isUserEmployee);
        const showInventory = computed(() => store.getters.showInventory);
        const isBroker = computed(() => store.getters.isBroker);
        const isBuyingGroup = computed(() => store.getters.isBuyingGroup);
        const product = computed(() => store.getters.product);
        const myNumber = computed(() => store.getters.myNumber);

        const fixedNav = computed(() => scrollPosition.value > triggerHeight.value);
        const currentOffset = computed(() => scrollPosition.value + headerHeight.value);
        const showFeatures = computed(() => true);
        const showNutritionAndAllergens = computed(() => props.productVariant.ShowNutritionAndAllergens);
        const showGtins = computed(() => props.baseProductModel.PackagingSection.GtinLevels);
        const showPricing = computed(() => !isNationalAccount.value);
        const showCertifications = computed(() => true);
        const showContacts = computed(() => isSupplier.value || isUserEmployee.value);
        const showMyNumber = computed(() => myNumber.value
            && !(isNationalAccount.value || isSupplier.value || isBroker.value || isBuyingGroup.value));

        const setActiveSection = pos => {
            if (pos < sectionOffsets.value[0]) {
                activeSection.value = 0;
            } else if (pos >= sectionOffsets.value[0] && pos < sectionOffsets.value[1] && showFeatures.value) {
                activeSection.value = 1;
            } else if (pos >= sectionOffsets.value[1] && pos < sectionOffsets.value[2] && showNutritionAndAllergens.value) {
                activeSection.value = 2;
            } else if (pos >= sectionOffsets.value[2] && pos < sectionOffsets.value[3] && showGtins.value) {
                activeSection.value = 3;
            } else if (pos >= sectionOffsets.value[3] && pos < sectionOffsets.value[4] && showPricing.value) {
                activeSection.value = 4;
            } else if (pos >= sectionOffsets.value[4] && pos < sectionOffsets.value[5] && showCertifications.value) {
                activeSection.value = 5;
            } else if (pos >= sectionOffsets.value[5] && pos < sectionOffsets.value[6] && showInventory.value) {
                activeSection.value = 6;
            } else if (pos >= sectionOffsets.value[6] && showContacts.value) {
                activeSection.value = 7;
            }
        };

        watch(currentOffset, newVal => {
            let adjust = 0;
            if (isImpersonating.value && root.$isMobileOrMobileLandscape) adjust = mobileImpersonationBarHeight.value;
            else if (isImpersonating.value && !root.$isMobileOrMobileLandscape) adjust = impersonationBarHeight.value;
            return setActiveSection(newVal + adjust);
        });

        const getHeaderHeight = () => {
            headerHeight.value = document.getElementById('stickyNav').clientHeight;
        };

        const getOffsets = () => {
            sectionOffsets.value = [];
            sections.value.forEach(sectionId => {
                const offset = document.getElementById(sectionId).offsetTop;
                sectionOffsets.value.push(offset);
            });
            getHeaderHeight();
            setActiveSection(Math.floor(window.scrollY));
        };

        const scrollTo = (val, label) => {
            getOffsets();
            let offset = 0;
            if (val > 0) {
                const sectionId = sections.value[val - 1];
                if (isImpersonating.value && root.$isMobileOrMobileLandscape) {
                    offset = document.getElementById(sectionId).offsetTop - (headerHeight.value + mobileImpersonationBarHeight.value);
                } else if (isImpersonating.value && !root.$isMobileOrMobileLandscape) {
                    offset = document.getElementById(sectionId).offsetTop - (headerHeight.value + impersonationBarHeight.value);
                } else {
                    offset = document.getElementById(sectionId).offsetTop - (headerHeight.value);
                }
            }
            pushTrackingEvent(JUMP_NAV_BAR_CATEGORY, CLICK_ACTION, label);
            window.scrollTo({ top: offset, behavior: 'smooth' });
        };

        EventBus.$on(EVENTS.PDP.SCROLL_TO_SECTION, scrollTo);

        const watchScroll = () => {
            scrollPosition.value = Math.floor(window.scrollY);
        };

        onMounted(() => {
            window.addEventListener('resize', getOffsets);
            window.addEventListener('scroll', watchScroll);

            const allRefs = [
                sectionFeatures.value,
                sectionNutrition.value,
                sectionGtins.value,
                sectionPricing.value,
                sectionCerts.value,
                sectionInventory.value,
                sectionContacts.value
            ];
            allRefs.forEach(eachRef => {
                sections.value.push(eachRef.id);
            });
            setTimeout(() => { getOffsets(); }, 1000);
        });

        onBeforeUnmount(() => {
            EventBus.$off(EVENTS.PDP.SCROLL_TO_SECTION, scrollTo);
        });

        return {
            sectionFeatures,
            sectionNutrition,
            sectionGtins,
            sectionPricing,
            sectionCerts,
            sectionInventory,
            sectionContacts,
            JUMP_NAV,
            JUMP_NAV_BAR_CATEGORY,
            CLICK_ACTION,
            showNutritionAndAllergens,
            sections,
            sectionOffsets,
            scrollPosition,
            activeSection,
            headerHeight,
            impersonationBarHeight,
            mobileImpersonationBarHeight,
            triggerHeight,
            isUserEmployeeAndNotImpersonating,
            isImpersonating,
            isNationalAccount,
            isSupplier,
            isUserEmployee,
            showInventory,
            isBroker,
            isBuyingGroup,
            product,
            myNumber,
            fixedNav,
            currentOffset,
            showFeatures,
            showGtins,
            showPricing,
            showCertifications,
            showContacts,
            showMyNumber,
            setActiveSection,
            getHeaderHeight,
            getOffsets,
            scrollTo,
            watchScroll
        };
    }
});
</script>